<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="chxDisable6to4.ToolTip" xml:space="preserve">
    <value>6to4 is an Internet transition mechanism for migrating from Internet Protocol version 4 (IPv4) to version 6 (IPv6), 
a system that allows IPv6 packets to be transmitted over an IPv4 network (generally the IPv4 Internet) without the need to configure explicit tunnels. 
Special relay servers are also in place that allow 6to4 networks to communicate with native IPv6 networks.</value>
  </data>
  <data name="chxDisableTeredo.ToolTip" xml:space="preserve">
    <value>Teredo is a transition technology that gives full IPv6 connectivity for IPv6-capable hosts 
that are on the IPv4 Internet but have no native connection to an IPv6 network.
Unlike similar protocols, it can perform its function even from 
behind network address translation (NAT) devices such as home routers.</value>
  </data>
  <data name="chxDisableAllIpHttps.ToolTip" xml:space="preserve">
    <value>IP over HTTPS ("IP-HTTPS", "MS-IPHTTPS") is a Microsoft network tunneling protocol.
The IP-HTTPS protocol transports IPv6 packets across non-IPv6 networks over HTTPS.
Because it uses HTTPS, it has high overhead and thus is not fast. 
It should only be used as a last resort IPv6 transition technoloy.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA59AKMNfQDPAAAAAAAAAAANfgBMDX0Azw59
        AK8OfQCvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB+AAgNfQDfDn0Aswt+ACwAAAAADX0Avwt+
        ACwAAAAADn0AjwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOfgBYDn0Ajw1+AFwNfQCDAAAAAA19
        ANsAAAAAAAAAAA19AIcAAAAAAAAAAAAAAADVhlhb1YJQ8NF8SPPReEKHDn0Arw1+ADgUfgAMDn0A1wAA
        AAANfQDjDX0Aqw59AKMNfQDPAAAAAAAAAAAAAAAA25Jm7+a3m//pvqT/3Jpz/3x9KugAAAAAAAAAAA59
        AK8OfgA0DX0Ayw9+ABAKfgAYAAAAAAAAAAAAAAAAAAAAAN2cdPfrw6z/7Mix/+rAqP/eoHv/1YJSjAAA
        AAAAAAAAAAAAAA1+AHANfQCTAH4ACAB+AAgAAAAAAAAAAAAAAADfpIJ136B6+ezHr//tyrT/6b2i/9WM
        YfwAAAAAAAAAAAAAAAAAAAAADn4AbA59AK8NfQCrAAAAAAAAAAAAAAAAAAAAAOOujHXgqIb+68ev/92g
        e/+7pJT/h4eHr4SEhF+CgoJVgICAFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA46+Qgd2q
        jPnDrqL/1dXV/7q6uv+lpaX/n5+f/4ODg+SBgYFiAAAAAAAAAAAPfgAgDX0AvwAAAAANfgBgDX4AgAAA
        AACVlZUCk5OTxcvLy//S0tL/ycnJ/9LS0v/FxcX/hISE6AAAAAAAAAAAD34AIA19AL8AAAAADX4AYA1+
        AIAAAAAAAAAAAJeXl1WxsbH/1tbW/5CQkNqNjY31v7+//4iIiP0AAAAAAAAAAA9+ACANfQC/AAAAAA1+
        AGAOfQCvDX4AYA1+ADiamppUtLS0/+bm5v+Tk5PvkZGRr46OjqaMjIyQAAAAAAAAAAAPfgAgDX0AvwAA
        AAANfgBgDn0Anw1+AEwOfQDDJYMZapubm+Th4eH/0tLS/5WVlasAAAAAAAAAAAAAAAAAAAAAD34AIA19
        AL8AAAAADX4AYA1+AIAAAAAAD34ARA59AK+dnZ1inJyc6JqamvmYmJiSAAAAAAAAAAAAAAAAAAAAAA9+
        ACANfQC/AAAAAA1+AGANfgCAAH4ACA19AIMOfQCLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAMfgAUDn0AjwAAAAAMfgA8DX0Avw19ALcNfQCHFH4ADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA/zCsQf4SrEH+FqxB4BCsQeDBrEHgcKxB4HisQfAHrEH4A6xBJAOsQSYDrEEgA6xBIA+sQSQP
        rEEg/6xBIP+sQQ==
</value>
  </data>
</root>